Q1. What’s difference between Synchronous and Asynchronous?

A. Synchronous communication or work happens in real time. Both parties are present and interacting at the same time. Examples of synchronous 
communication include phone calls, video meetings, and live chat.
Asynchronous communication or work happens independently of time. Messages or tasks can be sent or completed at any time. 
Examples of asynchronous communication include email, text messages, and file sharing.

Q2. What are Web Apis ?

A. A web API (Application Programming Interface) is a set of functions and procedures that allow applications 
to communicate with each other over the internet. Web APIs are used to access data and functionality from a remote server.

Web APIs are typically RESTful, which means that they use HTTP methods (such as GET, POST, PUT, and DELETE) 
to access resources. Resources are identified by URIs (Uniform Resource Identifiers), and the data returned 
by a web API is usually in JSON (JavaScript Object Notation) or XML (eXtensible Markup Language) format.

setTimeout() is a method in JavaScript, which is used to delay the function or output for a particular instance of time. 
setTimeout() is part of the scheduling time concept.

Q3. Explain SetTimeOut and setInterval ?

A. The setInterval() method in JavaScript is used to repeat a specified function at every given time-interval. 
It evaluates an expression or calls a function at given intervals.

Q4. how can you handle Async code in JavaScript ?

A. There are two main ways to handle asynchronous code in JavaScript:
Callbacks
Promises
Callbacks are functions that are passed as parameters to other functions. They are used to handle the completion of asynchronous operations. 
The callback function is called when the asynchronous operation is finished, and it can be used to do something with the result of the operation.

For example, the following code makes an HTTP request and then calls a callback function when the request is finished:

function makeRequest(url, callback) {
  var xhr = new XMLHttpRequest();
  xhr.open("GET", url);
  xhr.onload = function() {
    callback(xhr.responseText);
  };
  xhr.send();
}

makeRequest("https://www.example.com/", function(response) {
  console.log(response);
});

Promises are a more modern way to handle asynchronous code in JavaScript. Promises are objects that represent the eventual completion (or failure) 
of an asynchronous operation. They can be used to chain together asynchronous operations, and they can also be used to handle errors.

For example, the following code makes an HTTP request and then uses a promise to handle the completion of the request:

const promise = new Promise((resolve, reject) => {
  var xhr = new XMLHttpRequest();
  xhr.open("GET", "https://www.example.com/");
  xhr.onload = function() {
    if (xhr.status === 200) {
      resolve(xhr.responseText);
    } else {
      reject(new Error("Error getting response"));
    }
  };
  xhr.send();
});

promise.then(function(response) {
  console.log(response);
}, function(error) {
  console.log(error);
});

Q5. What are Callbacks &  Callback Hell ?

A. A callback function is a function that is passed as an argument to another function and is executed after some operation has been completed.

 Callback hell is a problem that can occur when you use callbacks to handle multiple asynchronous operations. The problem is that 
 the callbacks can become nested, which can make the code difficult to read and understand.

 Q6. What are Promises & Explain Some Three Methods of Promise
 A. Promises are a way of handling asynchronous operations in JavaScript. They were introduced in ECMAScript 6 (ES6) and are a pattern for writing 
 code that deals with data that is not immediately available.
A promise is an object that represents the eventual completion or failure of an asynchronous operation and the resulting value. It has three possible states:

for example, if we have to do some api calls, we can use promise

Here are three methods of promise:

.then()
.catch()
.finally()

Q7. What’s async & await Keyword in JavaScript

A. Async and await are keywords in JavaScript that allow you to write asynchronous code in a more concise and readable way.

Async is a keyword that can be used to declare a function that returns a promise. The async keyword tells the JavaScript
interpreter that the function will be asynchronous and that it should not block the main thread while the function is executing.

Await is a keyword that can be used to wait for the completion of a promise. The await keyword tells the JavaScript interpreter 
to suspend the execution of the current function until the promise is resolved or rejected.

Q8. Explain Purpose of Try and Catch Block & Why do we need it?

A. A try and catch block is a way to handle errors in your code. The try block contains the code that you are trying to execute, 
and the catch block contains the code that you want to run if an error occurs.

Q9. Explain fetch

A. The fetch() method in JavaScript is a modern way to make HTTP requests. It is a promise-based API, which means that it returns 
a promise that resolves to the response data or rejects with an error.

The fetch() method takes a URL as its only argument. It can also take an optional options object as its second argument. 
The options object can be used to specify the request method, the request headers, and other settings.

Here is an example of how to use the fetch() method:

const response = await fetch("https://www.example.com/");

if (response.status === 200) {
  const data = await response.json();
  console.log(data);
} else {
  console.log(response.status);
}

Q10. How do you define an asynchronous function in JavaScript using async/await?

A. Async and await are keywords in JavaScript that allow you to write asynchronous code in a more concise and readable way.

To define an asynchronous function in JavaScript using async/await, you need to use the async keyword before the function 
declaration. The async keyword tells the JavaScript interpreter that the function will be asynchronous and that it should 
not block the main thread while the function is executing.

async function fetchData() {
  const promise = new Promise((resolve, reject) => {
    var xhr = new XMLHttpRequest();
    xhr.open("GET", "https://www.example.com/");
    xhr.onload = function() {
      if (xhr.status === 200) {
        resolve(xhr.responseText);
      } else {
        reject(new Error("Error getting response"));
      }
    };
    xhr.send();
  });

  const data = await promise;
  console.log(data);
}


